import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../../contexts/AuthContext';
import PromptInput from './components/PromptInput';
import GenerationCanvas from './components/GenerationCanvas';
import TemplateGrid from './components/TemplateGrid';
import ComponentSidebar from './components/ComponentSidebar';
import ExportOptions from './components/ExportOptions';
import RefinementControls from './components/RefinementControls';
import Button from '../../components/ui/Button';
import Icon from '../../components/AppIcon';
import aiService from '../../utils/aiService';
import canvasService from '../../utils/canvasService';

const AIDesignGenerator = () => {
  const navigate = useNavigate();
  const { user, userProfile } = useAuth();
  const [activeTab, setActiveTab] = useState('generator');
  const [currentDesign, setCurrentDesign] = useState(null);
  const [isGenerating, setIsGenerating] = useState(false);
  const [templates, setTemplates] = useState([]);
  const [generationStep, setGenerationStep] = useState('prompt'); // prompt, generating, completed
  const [error, setError] = useState(null);

  // Load templates on component mount
  useEffect(() => {
    loadTemplates();
  }, []);

  const loadTemplates = async () => {
    try {
      const result = await aiService.getTemplates();
      if (result.success) {
        setTemplates(result.data || []);
      } else {
        setError(result.error);
        setTimeout(() => setError(null), 5000);
      }
    } catch (error) {
      setError('Failed to load templates');
      setTimeout(() => setError(null), 5000);
    }
  };

  const handleGenerateDesign = async (prompt, complexity) => {
    if (!prompt?.trim()) {
      setError('Please enter a design prompt');
      setTimeout(() => setError(null), 3000);
      return;
    }

    setIsGenerating(true);
    setGenerationStep('generating');
    setError(null);

    try {
      const result = await aiService.generateDesign(prompt, complexity);
      
      if (result.success) {
        setCurrentDesign(result.data);
        setGenerationStep('completed');
      } else {
        setError(result.error || 'Failed to generate design');
        setGenerationStep('prompt');
        setTimeout(() => setError(null), 5000);
      }
    } catch (error) {
      setError('An unexpected error occurred during generation');
      setGenerationStep('prompt');
      setTimeout(() => setError(null), 5000);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleTemplateSelect = async (template) => {
    if (template.id) {
      // Apply existing template
      try {
        const result = await aiService.applyTemplate(template.id);
        if (result.success) {
          setCurrentDesign({
            name: template.name,
            description: template.description,
            ...result.data
          });
          setGenerationStep('completed');
          setActiveTab('generator');
        } else {
          setError(result.error);
          setTimeout(() => setError(null), 5000);
        }
      } catch (error) {
        setError('Failed to apply template');
        setTimeout(() => setError(null), 5000);
      }
    } else {
      // Navigate to canvas with template data
      navigate('/canvas-studio', { 
        state: { 
          template: template,
          fromAI: true 
        } 
      });
    }
  };

  const handleImportToCanvas = async () => {
    if (!currentDesign) {
      setError('No design to import');
      setTimeout(() => setError(null), 3000);
      return;
    }

    try {
      // Create a new project first if user is authenticated
      if (user) {
        const projectResult = await projectService.createProject({
          name: currentDesign.name || 'AI Generated Project',
          description: currentDesign.description || 'Generated by AI'
        });

        if (projectResult.success) {
          const designData = {
            ...currentDesign,
            projectId: projectResult.data.id
          };
          
          const importResult = await canvasService.importAIDesign(designData);
          
          if (importResult.success) {
            navigate('/canvas-studio', { 
              state: { 
                designId: importResult.data.id,
                design: currentDesign,
                fromAI: true 
              } 
            });
          } else {
            setError(importResult.error);
            setTimeout(() => setError(null), 5000);
          }
        } else {
          setError(projectResult.error);
          setTimeout(() => setError(null), 5000);
        }
      } else {
        // For non-authenticated users, just navigate with design data
        navigate('/canvas-studio', { 
          state: { 
            design: currentDesign,
            fromAI: true 
          } 
        });
      }
    } catch (error) {
      setError('Failed to import design to canvas');
      setTimeout(() => setError(null), 5000);
    }
  };

  const handleStartNew = () => {
    setCurrentDesign(null);
    setGenerationStep('prompt');
    setError(null);
  };

  const tabs = [
    { id: 'generator', name: 'AI Generator', icon: 'Zap' },
    { id: 'templates', name: 'Templates', icon: 'Layout' }
  ];

  return (
    <div className="min-h-screen bg-background">
      {/* Header */}
      <div className="sticky top-0 z-40 border-b border-border bg-background/80 backdrop-blur-sm">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <h1 className="text-2xl font-bold text-foreground">AI System Design Generator</h1>
              
              {/* Tab Navigation */}
              <div className="flex space-x-1 bg-muted/30 p-1 rounded-lg">
                {tabs.map((tab) => (
                  <button
                    key={tab.id}
                    onClick={() => setActiveTab(tab.id)}
                    className={`px-4 py-2 rounded-md text-sm font-medium transition-all duration-200 flex items-center space-x-2 ${
                      activeTab === tab.id
                        ? 'bg-primary text-primary-foreground shadow-sm'
                        : 'text-muted-foreground hover:text-foreground hover:bg-muted/50'
                    }`}
                  >
                    <Icon name={tab.icon} size={16} />
                    <span>{tab.name}</span>
                  </button>
                ))}
              </div>
            </div>

            <div className="flex items-center space-x-3">
              {currentDesign && generationStep === 'completed' && (
                <>
                  <Button
                    variant="outline"
                    iconName="RotateCcw"
                    iconPosition="left"
                    onClick={handleStartNew}
                  >
                    Start New
                  </Button>
                  <Button
                    variant="default"
                    iconName="Download"
                    iconPosition="left"
                    onClick={handleImportToCanvas}
                  >
                    Import to Canvas
                  </Button>
                </>
              )}
              
              <Button
                variant="outline"
                iconName="ArrowLeft"
                iconPosition="left"
                onClick={() => navigate('/')}
              >
                Back to Home
              </Button>
            </div>
          </div>
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="mx-6 mt-4">
          <div className="bg-destructive/10 border border-destructive/20 rounded-lg p-4 flex items-center justify-between">
            <div className="flex items-center space-x-3">
              <Icon name="AlertCircle" size={20} className="text-destructive" />
              <span className="text-destructive font-medium">{error}</span>
            </div>
            <button
              onClick={() => setError(null)}
              className="text-destructive/70 hover:text-destructive"
            >
              <Icon name="X" size={16} />
            </button>
          </div>
        </div>
      )}

      {/* Main Content */}
      <div className="flex-1">
        {activeTab === 'generator' ? (
          <div className="grid grid-cols-12 gap-6 p-6 h-[calc(100vh-120px)]">
            {/* Left Sidebar - Controls */}
            <div className="col-span-3 space-y-6">
              {generationStep === 'prompt' && (
                <PromptInput
                  onGenerate={handleGenerateDesign}
                  isGenerating={isGenerating}
                />
              )}
              
              {generationStep === 'completed' && currentDesign && (
                <RefinementControls
                  design={currentDesign}
                  onRefine={(refinements) => {
                    // Apply refinements to current design
                    setCurrentDesign(prev => ({
                      ...prev,
                      ...refinements
                    }));
                  }}
                />
              )}

              <ComponentSidebar />
            </div>

            {/* Main Canvas Area */}
            <div className="col-span-6">
              <GenerationCanvas
                design={currentDesign}
                isGenerating={isGenerating}
                generationStep={generationStep}
                onImportToCanvas={handleImportToCanvas}
              />
            </div>

            {/* Right Sidebar - Export & Options */}
            <div className="col-span-3 space-y-6">
              {currentDesign && generationStep === 'completed' && (
                <ExportOptions
                  design={currentDesign}
                  onExport={(format) => {
                    // Handle export in different formats
                    console.log('Exporting design in format:', format);
                  }}
                />
              )}
            </div>
          </div>
        ) : (
          <div className="p-6">
            <TemplateGrid 
              templates={templates}
              onTemplateSelect={handleTemplateSelect}
            />
          </div>
        )}
      </div>
    </div>
  );
};

export default AIDesignGenerator;